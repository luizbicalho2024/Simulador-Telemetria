# pages/Simulador_PF.py
from decimal import Decimal, ROUND_DOWN # Importa√ß√µes Python padr√£o primeiro
import streamlit as st

# 1. st.set_page_config() - PRIMEIRO COMANDO STREAMLIT
st.set_page_config(
    layout="wide",
    page_title="Simulador Pessoa F√≠sica", # T√≠tulo da aba espec√≠fico
    page_icon="imgs/v-c.png", # Verifique se o caminho para a imagem do √≠cone est√° correto
    initial_sidebar_state="expanded"
)

# 2. BLOCO DE VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
auth_status = st.session_state.get("authentication_status", False)
if auth_status is not True:
    st.error("üîí Acesso Negado! Por favor, fa√ßa login na p√°gina principal para continuar.")
    print(f"ACCESS_DENIED_LOG (Simulador_PF.py): User not authenticated. Status: {auth_status}")
    try:
        # Certifique-se que o nome do arquivo da p√°gina principal est√° correto aqui
        st.page_link("Simulador_Comercial.py", label="Ir para Login", icon="üè†")
    except AttributeError: 
        st.info("Retorne √† p√°gina principal para efetuar o login.")
    st.stop() 

# Se chegou aqui, o usu√°rio est√° autenticado.
current_username = st.session_state.get('username', 'N/A')
current_role = st.session_state.get('role', 'Indefinido') # Ser√° 'Indefinido' se n√£o for pego corretamente no login
current_name = st.session_state.get('name', 'N/A')

print(f"INFO_LOG (Simulador_PF.py): User '{current_username}' authenticated. Role: '{current_role}'")

# 3. Restante do c√≥digo da sua p√°gina - AGORA o conte√∫do da p√°gina come√ßa
# üîµ Logotipo e cabe√ßalho estilizado
try:
    st.image("imgs/logo.png", width=250) # Verifique o caminho
except FileNotFoundError:
    print("WARN_LOG (Simulador_PF.py): Arquivo imgs/logo.png n√£o encontrado.")
    # st.warning("Logo n√£o encontrado.") # Opcional: mostrar aviso na UI
except Exception as e_img:
    print(f"WARN_LOG (Simulador_PF.py): Erro ao carregar imgs/logo.png: {e_img}")

st.markdown("<h1 style='text-align: center; color: #54A033;'>Simulador de Venda - Pessoa F√≠sica</h1>", unsafe_allow_html=True)
st.markdown("---")

# Informa√ß√µes do usu√°rio logado (ap√≥s o cabe√ßalho principal da p√°gina)
st.write(f"Usu√°rio: {current_name} ({current_username})")
st.write(f"N√≠vel de Acesso: {current_role}")
st.markdown("---")

# Exemplo de verifica√ß√£o de papel (role) se necess√°rio dentro desta p√°gina espec√≠fica:
# if current_role == "admin":
#     st.write("Conte√∫do espec√≠fico para Admin nesta p√°gina de PF.")
# elif current_role == "user":
#     st.write("Conte√∫do espec√≠fico para Usu√°rio Comum nesta p√°gina de PF.")
# else: # Se current_role for 'Indefinido' ou outro valor inesperado
#     st.warning("Papel do usu√°rio n√£o definido, funcionalidades podem ser limitadas.")


# üìå Defini√ß√£o dos pre√ßos (usando Decimal para precis√£o)
precos = {
    "GPRS / Gsm": Decimal("970.56"), # Use strings para Decimal para evitar problemas de float
    "Satelital": Decimal("2325.60")
}

# üéØ Se√ß√£o de entrada de dados na Sidebar
st.sidebar.header("üìù Configura√ß√µes PF") # T√≠tulo mais espec√≠fico para esta p√°gina
# Chaves √∫nicas para widgets da sidebar
modeloPF_key = "pf_modelo_rastreador_sb"
modeloPF = st.sidebar.selectbox("Tipo de Rastreador üì°", list(precos.keys()), key=modeloPF_key)

# üî¢ Exibir pre√ßo √† vista
preco_base = precos[modeloPF] # preco_base ser√° Decimal
st.markdown(f"### üí∞ Valor Anual √Ä Vista: R$ {preco_base:,.2f}")

# üîΩ Op√ß√£o de desconto
st.markdown("### üéØ Aplicar Desconto:")
col1_desc, col2_desc = st.columns([1, 3]) # Renomeadas para evitar conflito com outras colunas
# Chaves √∫nicas
desconto_checkbox_key = "pf_desconto_checkbox"
desconto_percent_key = "pf_desconto_percent_input"

with col1_desc: # Usando a vari√°vel renomeada
    desconto_ativo = st.checkbox("Ativar Desconto", value=False, key=desconto_checkbox_key)

desconto_calculado = preco_base # Valor padr√£o √© o pre√ßo base

if desconto_ativo:
    with col2_desc: # Usando a vari√°vel renomeada
        porcentagem_desconto = Decimal(str(st.number_input("Percentual de Desconto (%)", min_value=0.0, max_value=100.0, value=0.0, step=1.0, key=desconto_percent_key, format="%.2f")))
    
    if porcentagem_desconto > Decimal("0"):
        valor_do_desconto = (preco_base * (porcentagem_desconto / Decimal("100"))).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        desconto_calculado = (preco_base - valor_do_desconto).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        st.success(f"‚úÖ {porcentagem_desconto}% de desconto aplicado!")
        st.info(f"üí∞ **Valor com Desconto:** R$ {desconto_calculado:,.2f}")
    else:
        # Se o desconto estiver ativo mas a porcentagem for 0, n√£o mostra mensagem de sucesso
        # desconto_calculado j√° √© preco_base
        pass 
else:
    # desconto_calculado j√° √© preco_base
    pass


# üîΩ Op√ß√£o de parcelamento
st.markdown("### üí≥ Parcelamento:")
# Chaves √∫nicas
parcelamento_checkbox_key = "pf_parcelamento_checkbox"
parcelamento_num_parcelas_key = "pf_parcelamento_num_parcelas_sb"

parcelamento_ativo = st.checkbox("Ativar Parcelamento", value=False, key=parcelamento_checkbox_key)

if parcelamento_ativo:
    num_parcelas = st.selectbox("Quantidade de Parcelas:", options=[i for i in range(2, 13)], key=parcelamento_num_parcelas_key)
    
    # A l√≥gica da margem precisa ser revista para ser aplicada corretamente ao valor j√° com desconto
    # Margem de 4.08% AO M√äS √© muito alta. Se for uma taxa de juros da m√°quina de cart√£o,
    # ela geralmente √© aplicada sobre o valor da venda.
    # Exemplo: se a taxa da m√°quina √© 4.08% para 'num_parcelas', n√£o se multiplica pelo n√∫mero de parcelas assim.
    # A l√≥gica de juros de parcelamento √© mais complexa.
    # Simplificando para uma taxa fixa sobre o valor a ser parcelado (desconto_calculado)
    # Esta √© uma INTERPRETA√á√ÉO da sua l√≥gica original, que pode precisar de ajuste financeiro real.
    
    # Se a margem √© uma taxa de juros composta simples para o per√≠odo:
    # margem_parcelamento_percentual = Decimal(str(num_parcelas)) * Decimal("0.0408") # Sua l√≥gica original, resulta em juros muito altos
    # Para uma taxa de juros de exemplo de 2% a.m. (Price), o c√°lculo seria diferente.
    # Assumindo que 4.08% √© um fator fixo de acr√©scimo por parcela (simplifica√ß√£o)
    
    # Vamos manter sua l√≥gica original de margem por enquanto, mas com Decimal:
    margem_fator = Decimal(str(num_parcelas)) * Decimal("0.0408") 
    
    # O valor a ser parcelado √© o 'desconto_calculado'
    valor_a_parcelar_com_juros = desconto_calculado * (Decimal(1) + margem_fator)
    valor_parcela = (valor_a_parcelar_com_juros / Decimal(str(num_parcelas))).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
    total_parcelado = (valor_parcela * Decimal(str(num_parcelas))).quantize(Decimal('0.01'), rounding=ROUND_DOWN)

    st.success(f"‚úÖ Parcelado em {num_parcelas}x")
    st.info(f"üìÑ **{num_parcelas} Parcelas de:** R$ {valor_parcela:,.2f}")
    st.markdown(f"### üí∞ Valor Total Parcelado: R$ {total_parcelado:,.2f}")
    st.caption(f"(Juros/taxas de parcelamento j√° inclu√≠dos no valor da parcela e no total)")

# üéØ Bot√£o para limpar/reiniciar
if st.button("üîÑ Limpar Campos PF", key="pf_btn_limpar_v2"): # Chave √∫nica
    # A forma mais simples de limpar todos os inputs para seus valores default √© o rerun
    # Para um reset mais granular, voc√™ teria que gerenciar cada input no st.session_state
    st.rerun()