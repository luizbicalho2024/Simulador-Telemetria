# pages/üîó_Vinculo_Clientes_Terminais.py
import streamlit as st
import pandas as pd
import user_management_db as umdb
import json

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="V√≠nculo de Clientes e Terminais",
    page_icon="üîó"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. FUN√á√ÉO AUXILIAR ROBUSTA ---
@st.cache_data(show_spinner=False)
def processar_clientes_hierarquico(file_clientes):
    """
    L√™ a planilha de clientes com estrutura aninhada e a transforma em um JSON organizado.
    Identifica linhas de cliente e terminal, ignorando cabe√ßalhos de terminal.
    """
    try:
        # L√™ a planilha inteira sem cabe√ßalho para ter controlo total
        df_raw = pd.read_excel(file_clientes, header=None, engine='openpyxl')

        clientes_organizados = []
        cliente_atual_dict = None

        # Itera sobre todas as linhas do ficheiro
        for index, row in df_raw.iterrows():
            # Converte cada c√©lula em string e remove espa√ßos para uma compara√ß√£o fi√°vel
            row_values = [str(cell).strip() if pd.notna(cell) else "" for cell in row.values]

            # Heur√≠stica para identificar uma linha de CLIENTE:
            # A 4¬™ coluna (√≠ndice 3) cont√©m 'Jur√≠dica' ou 'F√≠sica'
            if len(row_values) > 3 and ("jur√≠dica" in row_values[3].lower() or "f√≠sica" in row_values[3].lower()):
                # Se j√° t√≠nhamos um cliente a ser processado, guarda-o na lista final
                if cliente_atual_dict is not None:
                    clientes_organizados.append(cliente_atual_dict)

                # Inicia um novo dicion√°rio para o cliente atual
                cliente_atual_dict = {
                    "Nome do Cliente": row_values[1],
                    "CPF/CNPJ": row_values[2],
                    "Tipo Cliente": row_values[3],
                    "Terminais": []
                }
                continue # Pula para a pr√≥xima linha

            # Se j√° identific√°mos um cliente, procuramos por linhas de TERMINAL
            if cliente_atual_dict is not None:
                terminal_str = row_values[0]
                rastreador_str = row_values[4].replace(".0", "") if len(row_values) > 4 and row_values[4] else ""

                # Um terminal v√°lido tem um valor na primeira coluna e n√£o √© um sub-cabe√ßalho
                if terminal_str and terminal_str.lower() != "terminal":
                    cliente_atual_dict["Terminais"].append({
                        "Terminal/Frota": terminal_str,
                        "Rastreador": rastreador_str
                    })

        # Adiciona o √∫ltimo cliente processado √† lista
        if cliente_atual_dict is not None:
            clientes_organizados.append(cliente_atual_dict)

        return clientes_organizados if clientes_organizados else None

    except Exception as e:
        st.error(f"Ocorreu um erro inesperado ao processar a planilha: {e}")
        return None

# --- 3. INTERFACE DA P√ÅGINA ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title(f"Ol√°, {st.session_state.get('name', 'N/A')}! üëã")
st.sidebar.markdown("---")

try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>üîó V√≠nculo de Clientes e Terminais</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- 4. UPLOAD DO FICHEIRO ---
st.subheader("Carregamento do Relat√≥rio de Clientes")
st.info("Esta ferramenta ir√° ler a estrutura hier√°rquica do `relatorio_clientes.xlsx` e organizar os dados.")

uploaded_clientes = st.file_uploader(
    "Carregue o `relatorio_clientes.xlsx`",
    type=['xlsx']
)

st.markdown("---")

# --- 5. AN√ÅLISE E EXIBI√á√ÉO EM JSON ---
if uploaded_clientes:
    try:
        with st.spinner("A processar a estrutura da planilha..."):
            dados_json = processar_clientes_hierarquico(uploaded_clientes)
        
        st.subheader("Estrutura de V√≠nculos Extra√≠da (Formato JSON)")
        
        if dados_json:
            total_terminais = sum(len(cliente['Terminais']) for cliente in dados_json)
            st.success(f"An√°lise conclu√≠da! Foram encontrados **{total_terminais}** terminais vinculados a **{len(dados_json)}** clientes.")
            st.json(dados_json)
        else:
            st.warning("N√£o foi poss√≠vel extrair uma estrutura v√°lida da planilha. Verifique se o ficheiro est√° correto.")

    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o ficheiro: {e}")
else:
    st.info("Por favor, carregue o `relatorio_clientes.xlsx` para iniciar a an√°lise.")
