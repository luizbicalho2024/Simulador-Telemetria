# pages/Pesquisa_de_Mercado.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import re

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="Pesquisa de Mercado",
    page_icon="imgs/v-c.png"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. DADOS CENTRALIZADOS ---
MARKET_DATA = {
    "funcionalidades": [
        {'Empresa': 'VERDIO', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚úÖ Sim', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Sascar', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Omnilink', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Onixsat', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Veltec', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Positron', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùî Opcional', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Autotrac', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Maxtrack', 'Categoria': 'Nacional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Elite Rastro', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'NJ Rastreamento', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'TK Rastreadores', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚ùî Comercial', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'vtrackrastreamento', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'rastrek', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚ùî Parcial', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Pro Lion', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Impacto Rast.', 'Categoria': 'Regional', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Com. Satelital': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
    ],
    "precos": [
        {'Empresa': 'VERDIO', 'Mensalidade (GPRS)': 'R$ 44,93 - R$ 584,49'},
        {'Empresa': 'Sascar', 'Mensalidade (GPRS)': 'R$ 79,90'},
        {'Empresa': 'Omnilink', 'Mensalidade (GPRS)': 'R$ 89,90'},
        {'Empresa': 'Onixsat', 'Mensalidade (GPRS)': '‚Äì'},
        {'Empresa': 'Veltec', 'Mensalidade (GPRS)': 'R$ 110,00'},
        {'Empresa': 'Positron', 'Mensalidade (GPRS)': 'R$ 75,00'},
        {'Empresa': 'Autotrac', 'Mensalidade (GPRS)': 'R$ 99,90'},
        {'Empresa': 'Maxtrack', 'Mensalidade (GPRS)': 'R$ 59,90'},
        {'Empresa': 'Elite Rastro', 'Mensalidade (GPRS)': 'R$ 50,00'},
        {'Empresa': 'NJ Rastreamento', 'Mensalidade (GPRS)': 'R$ 75,00'},
        {'Empresa': 'TK Rastreadores', 'Mensalidade (GPRS)': 'R$ 69,90'},
        {'Empresa': 'vtrackrastreamento', 'Mensalidade (GPRS)': 'R$ 50,00'},
        {'Empresa': 'rastrek', 'Mensalidade (GPRS)': 'R$ 60,00'},
        {'Empresa': 'Pro Lion', 'Mensalidade (GPRS)': 'R$ 49,90 - R$ 69,90'},
        {'Empresa': 'Impacto Rast.', 'Mensalidade (GPRS)': 'R$ 45,00'},
    ]
}

# --- 3. PROCESSAMENTO DE DADOS ---
df_func_all = pd.DataFrame(MARKET_DATA["funcionalidades"])
df_prices_all = pd.DataFrame(MARKET_DATA["precos"])

score_map = {'‚úÖ Sim': 1.0, '‚ùî Opcional': 0.5, '‚ùî Parcial': 0.5, '‚ùå N√£o': 0.0, '‚ùî Comercial': 0.0}
features_to_score = ['Telemetria (CAN)', 'V√≠deo', 'Sensor de Fadiga', 'Controle de Jornada', 'Roteirizador', 'Com. Satelital', 'Suporte 24h', 'App de Gest√£o']
for feature in features_to_score:
    if feature in df_func_all.columns:
        df_func_all[feature + '_Score'] = df_func_all[feature].map(score_map).fillna(0)
df_func_all['Pontua√ß√£o Total'] = df_func_all[[f + '_Score' for f in features_to_score]].sum(axis=1)

def clean_price(price_str):
    try:
        return float(re.findall(r'\d+[\.,]\d+', str(price_str))[0].replace(',', '.'))
    except (IndexError, TypeError):
        return None
df_prices_all['Mensalidade_GPRS_Num'] = df_prices_all['Mensalidade (GPRS)'].apply(clean_price)

df_bi = pd.merge(df_func_all, df_prices_all, on='Empresa', how='left')
df_bi.dropna(subset=['Mensalidade_GPRS_Num', 'Pontua√ß√£o Total'], inplace=True)
df_bi['Custo_por_Ponto'] = df_bi['Mensalidade_GPRS_Num'] / df_bi['Pontua√ß√£o Total']
df_bi['Custo_por_Ponto'].fillna(0, inplace=True) # Evita divis√£o por zero

# --- 4. INTERFACE ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title("Filtros e An√°lises")

# --- Filtros Interativos ---
st.sidebar.subheader("Filtros do Dashboard")
categorias = st.sidebar.multiselect("Filtrar por Categoria:", options=df_bi['Categoria'].unique(), default=df_bi['Categoria'].unique())
max_price = int(df_bi['Mensalidade_GPRS_Num'].max()) + 1
price_range = st.sidebar.slider("Filtrar por Faixa de Pre√ßo (GPRS):", 0, max_price, (0, max_price))
max_score = int(df_bi['Pontua√ß√£o Total'].max()) + 1
score_range = st.sidebar.slider("Filtrar por Pontua√ß√£o de Funcionalidades:", 0, max_score, (0, max_score))

# --- An√°lise "What-If" ---
st.sidebar.subheader("An√°lise de Cen√°rio (What-If)")
verdio_default_price = clean_price(df_prices_all[df_prices_all['Empresa'] == 'VERDIO']['Mensalidade (GPRS)'].iloc[0])
novo_preco_verdio = st.sidebar.number_input("Simular novo pre√ßo para o VERDIO:", value=verdio_default_price, step=5.0, format="%.2f")

# Aplica os filtros ao DataFrame principal
df_bi_filtered = df_bi[
    (df_bi['Categoria'].isin(categorias)) &
    (df_bi['Mensalidade_GPRS_Num'] >= price_range[0]) &
    (df_bi['Mensalidade_GPRS_Num'] <= price_range[1]) &
    (df_bi['Pontua√ß√£o Total'] >= score_range[0]) &
    (df_bi['Pontua√ß√£o Total'] <= score_range[1])
].copy()
# Atualiza o pre√ßo do VERDIO para a simula√ß√£o
if not df_bi_filtered[df_bi_filtered['Empresa'] == 'VERDIO'].empty:
    df_bi_filtered.loc[df_bi_filtered['Empresa'] == 'VERDIO', 'Mensalidade_GPRS_Num'] = novo_preco_verdio


try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>Pesquisa de Mercado e Concorrentes</h1>", unsafe_allow_html=True)
st.markdown("---")
# ... (Sec√ß√µes Mercado Alvo e Diferenciais como antes) ...
st.markdown("---")

# --- 5. EXIBI√á√ÉO DAS TABELAS E MATRIZ DE CALOR ---
st.subheader("An√°lise de Funcionalidades")
df_func_heatmap = df_func_all.set_index('Empresa')[[f + '_Score' for f in features_to_score]]
st.dataframe(df_func_heatmap.style.background_gradient(cmap='RdYlGn', axis=1).format("{:.1f}"))
st.markdown("---")

# --- 6. GR√ÅFICOS DE BI (ATUALIZADOS COM FILTROS) ---
st.subheader("Visualiza√ß√£o e Intelig√™ncia de Mercado (BI)")

if df_bi_filtered.empty:
    st.warning("Nenhum concorrente corresponde aos filtros selecionados.")
else:
    # --- GR√ÅFICO 1: CUSTO POR PONTO ---
    st.markdown("##### An√°lise de Custo por Ponto de Funcionalidade")
    df_custo_ponto = df_bi_filtered.copy()
    df_custo_ponto = df_custo_ponto[df_custo_ponto['Pontua√ß√£o Total'] > 0] # Evita divis√£o por zero
    df_custo_ponto['Custo_por_Ponto'] = df_custo_ponto['Mensalidade_GPRS_Num'] / df_custo_ponto['Pontua√ß√£o Total']
    df_custo_ponto.sort_values('Custo_por_Ponto', ascending=False, inplace=True)

    fig_cost_per_point = go.Figure(go.Bar(
        y=df_custo_ponto['Empresa'], x=df_custo_ponto['Custo_por_Ponto'],
        orientation='h', marker=dict(color=df_custo_ponto['Custo_por_Ponto'], colorscale='Reds_r')
    ))
    fig_cost_per_point.update_layout(title='Custo por Ponto de Funcionalidade (Menor √© Melhor)', xaxis_title='R$ por Ponto de Funcionalidade', yaxis_title=None)
    st.plotly_chart(fig_cost_per_point, use_container_width=True)

    # --- GR√ÅFICO 2: CUSTO-BENEF√çCIO ---
    st.markdown("##### An√°lise de Custo-Benef√≠cio (GPRS)")
    unique_companies = df_bi_filtered['Empresa'].unique()
    color_palette = px.colors.qualitative.Plotly
    color_map = {company: color_palette[i % len(color_palette)] for i, company in enumerate(unique_companies)}
    if 'VERDIO' in color_map:
        color_map['VERDIO'] = '#2ca02c'

    df_bi_filtered['color'] = df_bi_filtered['Empresa'].map(color_map)
    df_bi_filtered['size'] = df_bi_filtered['Pontua√ß√£o Total'].apply(lambda y: y * 4 + 15)

    fig_bubble_bi = go.Figure()
    for empresa in df_bi_filtered['Empresa'].unique():
        df_empresa = df_bi_filtered[df_bi_filtered['Empresa'] == empresa]
        fig_bubble_bi.add_trace(go.Scatter(
            x=df_empresa['Mensalidade_GPRS_Num'], y=df_empresa['Pontua√ß√£o Total'],
            name=empresa, text=df_empresa['Empresa'], mode='markers',
            marker=dict(size=df_empresa['size'], color=df_empresa['color'].iloc[0], sizemode='diameter')
        ))
    fig_bubble_bi.update_layout(
        title='Custo (Mensalidade GPRS) vs. Benef√≠cio (Pontua√ß√£o de Funcionalidades)',
        xaxis_title="Pre√ßo da Mensalidade GPRS (R$)",
        yaxis_title="Pontua√ß√£o Total de Funcionalidades",
        height=600, legend_title_text='Concorrentes'
    )
    st.plotly_chart(fig_bubble_bi, use_container_width=True)
