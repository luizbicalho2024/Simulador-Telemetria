# pages/Simulador_Licita√ß√£o.py
from decimal import Decimal, ROUND_DOWN # Importa√ß√µes Python primeiro
import pandas as pd # Importado para criar a tabela de detalhamento
import streamlit as st

# 1. st.set_page_config() - PRIMEIRO COMANDO STREAMLIT
st.set_page_config(
    layout="wide",
    page_title="Simulador Licita√ß√µes e Editais", # T√≠tulo da aba espec√≠fico
    page_icon="imgs/v-c.png", # Verifique se o caminho est√° correto
    initial_sidebar_state="expanded"
)

# 2. BLOCO DE VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
# auth_status = st.session_state.get("authentication_status", False)
# if auth_status is not True:
#     st.error("üîí Acesso Negado! Por favor, fa√ßa login na p√°gina principal para continuar.")
#     print(f"ACCESS_DENIED_LOG (Simulador_Licita√ß√£o.py): User not authenticated. Status: {auth_status}")
#     try:
#         st.page_link("Simulador_Comercial.py", label="Ir para Login", icon="üè†")
#     except AttributeError:
#         st.info("Retorne √† p√°gina principal para efetuar o login.")
#     st.stop()

# # Se chegou aqui, o usu√°rio est√° autenticado.
# current_username = st.session_state.get('username', 'N/A')
# current_role = st.session_state.get('role', 'Indefinido') # Ser√° 'Indefinido' se n√£o for pego corretamente no login
# current_name = st.session_state.get('name', 'N/A')

# print(f"INFO_LOG (Simulador_Licita√ß√£o.py): User '{current_username}' authenticated. Role: '{current_role}'")

# --- Bloco de Autentica√ß√£o Mock (para teste) ---
# Remova ou comente este bloco e descomente o bloco acima quando em produ√ß√£o
current_name = "Usu√°rio Teste"
current_username = "teste"
current_role = "Admin"
# --- Fim do Bloco Mock ---


# 3. Restante do c√≥digo da sua p√°gina
try:
    st.image("imgs/logo.png", width=250) # Verifique o caminho
except Exception as e:
    st.info("Logo n√£o encontrado. Usando placeholder.")


st.markdown("<h1 style='text-align: center; color: #54A033;'>Simulador para Licita√ß√µes e Editais</h1>", unsafe_allow_html=True)
st.markdown("---")

st.write(f"Usu√°rio: {current_name} ({current_username})")
st.write(f"N√≠vel de Acesso: {current_role}")
st.markdown("---")

# üìå Tabela de pre√ßos de equipamentos convertida para Decimal
precoCusto = {
    "Rastreador GPRS/GSM 2G": Decimal("300"),
    "Rastreador GPRS/GSM 4G": Decimal("400"),
    "Rastreador Satelital": Decimal("900"),
    "Telemetria/CAN": Decimal("600"),
    "RFID - ID Motorista": Decimal("153"),
}

# üéØ Sidebar para entrada de dados
st.sidebar.header("üìù Configura√ß√µes da Licita√ß√£o")
qtd = Decimal(st.sidebar.number_input("Quantidade de Ve√≠culos üöó", min_value=1, value=1, step=1, key="lic_qtd_veiculos"))
contrato = Decimal(st.sidebar.number_input("Tempo de Contrato (meses) üìÜ", min_value=1, value=12, step=1, key="lic_tempo_contrato"))
margem = Decimal(str(st.sidebar.slider("Margem de Lucro (%) üìà", min_value=0.0, max_value=1.0, value=0.3, step=0.01, format="%.2f", key="lic_margem_lucro")))

# NOVOS INPUTS PARA SERVI√áOS ADICIONAIS NA SIDEBAR
st.sidebar.header("üîß Servi√ßos Adicionais")
valor_instalacao = Decimal(str(st.sidebar.number_input("Valor Instala√ß√£o (unit√°rio)", min_value=0.0, value=50.0, step=10.0, format="%.2f", key="lic_valor_instalacao")))
valor_manutencao = Decimal(str(st.sidebar.number_input("Valor Manuten√ß√£o (unit√°rio)", min_value=0.0, value=50.0, step=10.0, format="%.2f", key="lic_valor_manutencao")))
valor_desinstalacao = Decimal(str(st.sidebar.number_input("Valor Desinstala√ß√£o (unit√°rio)", min_value=0.0, value=50.0, step=10.0, format="%.2f", key="lic_valor_desinstalacao")))


# üîΩ Sele√ß√£o de itens e servi√ßos
col1, col2 = st.columns(2)

with col1:
    st.markdown("### üì¶ Selecione os Itens")
    itens_selecionados = []
    # Usar um loop para criar os toggles de itens
    for item, preco in precoCusto.items():
        item_key = f"toggle_item_lic_{item.replace(' ', '_').replace('/', '_')}"
        if st.toggle(f"{item} - R$ {preco:,.2f}", key=item_key):
            itens_selecionados.append(item)

with col2:
    st.markdown("### üõ†Ô∏è Selecione os Servi√ßos")
    # Toggles para incluir os servi√ßos adicionais no c√°lculo
    incluir_instalacao = st.toggle(f"Incluir Instala√ß√£o (R$ {valor_instalacao:,.2f})", key="lic_toggle_instalacao")
    incluir_manutencao = st.toggle(f"Incluir Manuten√ß√£o (R$ {valor_manutencao:,.2f})", key="lic_toggle_manutencao")
    incluir_desinstalacao = st.toggle(f"Incluir Desinstala√ß√£o (R$ {valor_desinstalacao:,.2f})", key="lic_toggle_desinstalacao")


st.markdown("---")

# üìå L√≥gica de c√°lculo e exibi√ß√£o de resultados
# A condi√ß√£o agora verifica se h√° itens ou servi√ßos selecionados
if itens_selecionados or incluir_instalacao or incluir_manutencao or incluir_desinstalacao:
    
    detalhamento_proposta = []
    valor_total_locacao = Decimal("0")
    mensalidade_venda_unitaria = Decimal("0")

    # 1. C√°lculo da Loca√ß√£o (se houver itens)
    if itens_selecionados:
        valor_total_unitario_hw = sum(precoCusto[item] for item in itens_selecionados)
        mensalidade_custo_unitario = (valor_total_unitario_hw / Decimal(12)).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        mensalidade_venda_unitaria = (mensalidade_custo_unitario * (Decimal(1) + margem)).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        valor_total_locacao = (mensalidade_venda_unitaria * qtd * contrato).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        
        # Adiciona √† lista para a tabela
        detalhamento_proposta.append({
            "SERVI√áO/PRODUTO": f"Loca√ß√£o de Equipamentos ({', '.join(itens_selecionados)})",
            "QUANTIDADE": f"{int(qtd)} x {int(contrato)} meses",
            "VALOR UNIT√ÅRIO": mensalidade_venda_unitaria,
            "VALOR TOTAL": valor_total_locacao
        })

    # 2. C√°lculo dos Servi√ßos Adicionais (custos √∫nicos)
    valor_total_servicos = Decimal("0")

    if incluir_instalacao:
        total_servico = (valor_instalacao * qtd).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        valor_total_servicos += total_servico
        detalhamento_proposta.append({
            "SERVI√áO/PRODUTO": "Taxa de Instala√ß√£o",
            "QUANTIDADE": int(qtd),
            "VALOR UNIT√ÅRIO": valor_instalacao,
            "VALOR TOTAL": total_servico
        })

    if incluir_manutencao:
        total_servico = (valor_manutencao * qtd).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        valor_total_servicos += total_servico
        detalhamento_proposta.append({
            "SERVI√áO/PRODUTO": "Taxa de Manuten√ß√£o",
            "QUANTIDADE": int(qtd),
            "VALOR UNIT√ÅRIO": valor_manutencao,
            "VALOR TOTAL": total_servico
        })

    if incluir_desinstalacao:
        total_servico = (valor_desinstalacao * qtd).quantize(Decimal('0.01'), rounding=ROUND_DOWN)
        valor_total_servicos += total_servico
        detalhamento_proposta.append({
            "SERVI√áO/PRODUTO": "Taxa de Desinstala√ß√£o",
            "QUANTIDADE": int(qtd),
            "VALOR UNIT√ÅRIO": valor_desinstalacao,
            "VALOR TOTAL": total_servico
        })

    # 3. C√°lculo do Valor Global do Contrato
    valor_total_contrato_global = valor_total_locacao + valor_total_servicos

    # üîπ Exibi√ß√£o dos resultados principais
    st.success("‚úÖ C√°lculo da Proposta para Licita√ß√£o realizado!")
    
    col_metric1, col_metric2 = st.columns(2)
    with col_metric1:
      # Exibe a mensalidade apenas se houver equipamentos selecionados
      if mensalidade_venda_unitaria > 0:
        st.metric(label="Mensalidade por Ve√≠culo (Loca√ß√£o)", value=f"R$ {mensalidade_venda_unitaria:,.2f}")
    
    with col_metric2:
      st.metric(label="üí∞ Valor Total Estimado do Contrato", value=f"R$ {valor_total_contrato_global:,.2f}")
    
    st.caption(f"C√°lculo considerando {int(qtd)} ve√≠culo(s) por {int(contrato)} meses, com margem de {margem*100:.0f}% sobre equipamentos.")

    # üîπ EXIBI√á√ÉO DA TABELA DE DETALHAMENTO
    if detalhamento_proposta:
        st.markdown("### üìä Detalhamento da Proposta")
        df = pd.DataFrame(detalhamento_proposta)

        # Adicionar linha de total
        total_row = pd.DataFrame([{
            "SERVI√áO/PRODUTO": "VALOR TOTAL GERAL",
            "QUANTIDADE": "",
            "VALOR UNIT√ÅRIO": "",
            "VALOR TOTAL": valor_total_contrato_global
        }])
        
        df_final = pd.concat([df, total_row], ignore_index=True)

        # Exibindo o DataFrame com formata√ß√£o
        st.dataframe(
            df_final,
            use_container_width=True,
            column_config={
                "VALOR UNIT√ÅRIO": st.column_config.NumberColumn(
                    "Valor Unit√°rio (R$)",
                    format="%.2f",
                ),
                "VALOR TOTAL": st.column_config.NumberColumn(
                    "Valor Total (R$)",
                    format="%.2f",
                ),
            },
            hide_index=True,
        )

else:
    st.warning("‚ö†Ô∏è Selecione pelo menos um item ou servi√ßo para calcular a proposta.")

st.markdown("---")
# üéØ Bot√£o para limpar sele√ß√£o (reinicia a p√°gina)
if st.button("üîÑ Limpar Campos e Recalcular", key="lic_btn_limpar_recalcular"):
    st.rerun()

