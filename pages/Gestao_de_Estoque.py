# pages/Gestao_de_Estoque.py
import streamlit as st
import pandas as pd
import io

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="Gest√£o de Estoque",
    page_icon="üì¶"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. FUN√á√ïES AUXILIARES (MAIS ROBUSTAS) ---
def processar_estoque_sistema(df_sistema_raw):
    """
    Processa e limpa o DataFrame do sistema, localizando o cabe√ßalho dinamicamente
    com base nas novas colunas fornecidas.
    """
    header_row_index = -1
    # Procura pelo cabe√ßalho nas primeiras 20 linhas do ficheiro
    for i, row in df_sistema_raw.head(20).iterrows():
        # Converte a linha para uma string √∫nica para facilitar a busca
        row_str = ' '.join(map(str, row.values)).lower()
        # Procura por palavras-chave que identificam o cabe√ßalho
        if 'modelo' in row_str and 'n¬∫ s√©rie' in row_str and 'status' in row_str:
            header_row_index = i
            break
            
    if header_row_index == -1:
        raise ValueError("N√£o foi poss√≠vel encontrar a linha de cabe√ßalho. Verifique se o ficheiro cont√©m as colunas 'Modelo', 'N¬∫ S√©rie' e 'Status'.")

    df_sistema = df_sistema_raw.copy()
    df_sistema.columns = df_sistema.iloc[header_row_index]
    df_sistema = df_sistema.iloc[header_row_index + 1:].reset_index(drop=True)
    
    # Renomeia as colunas para um formato padronizado, mapeando 'N¬∫ S√©rie' para 'Serial'
    df_sistema = df_sistema.rename(columns={
        'N¬∫ S√©rie': 'Serial',
        '√öltima Transmiss√£o': 'Ultima_Transmissao' # Exemplo de como renomear outras se necess√°rio
    })
    
    # Garante que a coluna 'Serial' existe ap√≥s a renomea√ß√£o
    if 'Serial' not in df_sistema.columns:
        raise ValueError("A coluna 'N¬∫ S√©rie' n√£o foi encontrada no cabe√ßalho do ficheiro do sistema.")

    # Remove linhas onde o 'Serial' √© nulo ou vazio
    df_sistema.dropna(subset=['Serial'], inplace=True)
    df_sistema = df_sistema[df_sistema['Serial'].astype(str).str.strip() != '']
    
    df_sistema['Serial'] = df_sistema['Serial'].astype(str).str.strip()
    return df_sistema

def processar_estoque_fisico(df_fisico):
    """Processa e limpa o DataFrame do estoque f√≠sico."""
    df_fisico.columns = ['Serial'] + list(df_fisico.columns[1:])
    df_fisico = df_fisico[['Serial']]
    df_fisico['Serial'] = df_fisico['Serial'].astype(str).str.strip()
    return df_fisico

# --- 3. INTERFACE DA P√ÅGINA ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title(f"Ol√°, {st.session_state.get('name', 'N/A')}! üëã")
st.sidebar.markdown("---")

try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>üì¶ Dashboard de Gest√£o de Estoque</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- 4. UPLOAD DOS FICHEIROS ---
st.subheader("Carregamento dos Ficheiros de Estoque")
col1, col2 = st.columns(2)

with col1:
    st.info("**1. Estoque do Sistema**")
    st.warning("‚ö†Ô∏è **Instru√ß√µes:** Exporte o `relatorio_rastreador.xls` do sistema e guarde-o como **CSV (separado por ponto e v√≠rgula)** no Excel antes de carregar.")
    uploaded_sistema = st.file_uploader(
        "Carregue o ficheiro do sistema (guardado como .csv)",
        type=['csv']
    )

with col2:
    st.info("**2. Estoque F√≠sico**")
    uploaded_fisico = st.file_uploader(
        "Carregue a planilha do invent√°rio f√≠sico (`estoque_fisico.xlsx`)",
        type=['xlsx', 'csv']
    )

st.markdown("---")

# --- 5. AN√ÅLISE E COMPARA√á√ÉO ---
if uploaded_sistema and uploaded_fisico:
    try:
        df_sistema_raw = pd.read_csv(uploaded_sistema, delimiter=';', header=None, encoding='latin-1', on_bad_lines='skip')
        
        try:
            df_fisico_raw = pd.read_excel(uploaded_fisico)
        except Exception:
            uploaded_fisico.seek(0)
            df_fisico_raw = pd.read_csv(uploaded_fisico)

        df_sistema = processar_estoque_sistema(df_sistema_raw)
        df_fisico = processar_estoque_fisico(df_fisico_raw)

        st.subheader("Resultados da Concilia√ß√£o de Estoque")

        with st.expander("üîç An√°lise do Estoque F√≠sico", expanded=True):
            df_fisico_com_status = pd.merge(df_fisico, df_sistema[['Serial', 'Status', 'Modelo']], on='Serial', how='left')
            df_fisico_com_status['Status'].fillna('N√£o Encontrado no Sistema', inplace=True)
            
            st.metric("Total de Rastreadores no Estoque F√≠sico", value=len(df_fisico))
            
            disponivel_revisao = df_fisico_com_status[df_fisico_com_status['Status'].isin(['Dispon√≠vel', 'Revis√£o'])]
            indisponivel = df_fisico_com_status[df_fisico_com_status['Status'] == 'Indispon√≠vel']
            manutencao = df_fisico_com_status[df_fisico_com_status['Status'] == 'Manuten√ß√£o']
            
            col_a, col_b, col_c = st.columns(3)
            col_a.success(f"Dispon√≠vel/Revis√£o: **{len(disponivel_revisao)}**")
            col_b.warning(f"Indispon√≠vel (Em Uso): **{len(indisponivel)}**")
            col_c.error(f"Manuten√ß√£o: **{len(manutencao)}**")
            st.dataframe(df_fisico_com_status, use_container_width=True, hide_index=True)

        with st.expander("‚ö†Ô∏è An√°lise de Diverg√™ncias", expanded=True):
            seriais_sistema = set(df_sistema['Serial'])
            seriais_fisico = set(df_fisico['Serial'])
            
            faltando_no_fisico = seriais_sistema - seriais_fisico
            
            if not faltando_no_fisico:
                st.success("üéâ Parab√©ns! Todos os rastreadores do sistema foram encontrados no estoque f√≠sico.")
            else:
                st.error(f"Aten√ß√£o: {len(faltando_no_fisico)} rastreador(es) n√£o foram encontrados no estoque f√≠sico.")
                # Garante que a coluna '√öltima Transmiss√£o' existe para exibi√ß√£o
                if 'Ultima_Transmissao' not in df_sistema.columns:
                     df_sistema['Ultima_Transmissao'] = "N/A"
                df_faltantes = df_sistema[df_sistema['Serial'].isin(faltando_no_fisico)]
                st.dataframe(
                    df_faltantes[['Serial', 'Status', 'Modelo', 'Ultima_Transmissao']],
                    use_container_width=True, hide_index=True
                )

    except Exception as e:
        st.error(f"Ocorreu um erro ao processar os ficheiros: {e}")
        st.info("Por favor, verifique se os ficheiros t√™m o formato e as colunas esperadas, seguindo as instru√ß√µes acima.")

else:
    st.info("Por favor, carregue ambos os ficheiros para iniciar a an√°lise.")
