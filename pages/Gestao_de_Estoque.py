# pages/Gestao_de_Estoque.py
import streamlit as st
import pandas as pd
import io

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="Gest√£o de Estoque",
    page_icon="üì¶"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. FUN√á√ÉO AUXILIAR ---
def processar_estoque_fisico(df_fisico):
    """Processa e limpa o DataFrame do estoque f√≠sico."""
    df_fisico.columns = ['Serial'] + list(df_fisico.columns[1:])
    df_fisico = df_fisico[['Serial']]
    df_fisico['Serial'] = df_fisico['Serial'].astype(str).str.strip()
    return df_fisico

# --- 3. INTERFACE DA P√ÅGINA ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title(f"Ol√°, {st.session_state.get('name', 'N/A')}! üëã")
st.sidebar.markdown("---")

try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>üì¶ Dashboard de Gest√£o de Estoque</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- 4. UPLOAD DOS FICHEIROS ---
st.subheader("Carregamento dos Ficheiros de Estoque")
col1, col2 = st.columns(2)

with col1:
    st.info("**1. Estoque do Sistema**")
    st.warning("‚ö†Ô∏è **Instru√ß√µes:** Abra o `relatorio_rastreador.xls` no Excel e guarde-o como **Pasta de Trabalho do Excel (*.xlsx)** antes de o carregar.")
    uploaded_sistema = st.file_uploader(
        "Carregue o ficheiro do sistema (guardado como .xlsx)",
        type=['xlsx']
    )

with col2:
    st.info("**2. Estoque F√≠sico**")
    uploaded_fisico = st.file_uploader(
        "Carregue a planilha do invent√°rio f√≠sico",
        type=['xlsx', 'csv']
    )

st.markdown("---")

# --- 5. AN√ÅLISE E COMPARA√á√ÉO ---
if uploaded_sistema and uploaded_fisico:
    try:
        # L√™ o ficheiro do sistema diretamente como .xlsx, assumindo o cabe√ßalho na linha 12
        df_sistema = pd.read_excel(
            uploaded_sistema,
            header=11, # Linha 12 do Excel (√≠ndice 11)
            engine='openpyxl'
        )
        
        # Renomeia as colunas para um formato padronizado e seguro
        df_sistema = df_sistema.rename(columns={'N¬∫ S√©rie': 'Serial', 'N¬∫ Equipamento': 'N_Equipamento'})
        
        # Valida√ß√£o crucial para garantir que a leitura foi bem-sucedida
        required_columns = ['Serial', 'Status', 'Modelo']
        if not all(col in df_sistema.columns for col in required_columns):
            st.error(f"Erro de Colunas: O cabe√ßalho na linha 12 do seu ficheiro .xlsx n√£o cont√©m as colunas necess√°rias (Ex: 'N¬∫ S√©rie', 'Status', 'Modelo').")
            st.write("Colunas encontradas:", df_sistema.columns.tolist())
            st.stop()

        df_sistema['Serial'] = df_sistema['Serial'].astype(str).str.strip()
        df_sistema.dropna(subset=['Serial'], inplace=True)

        # L√™ o ficheiro do estoque f√≠sico
        try:
            df_fisico_raw = pd.read_excel(uploaded_fisico)
        except Exception:
            uploaded_fisico.seek(0)
            df_fisico_raw = pd.read_csv(uploaded_fisico)
        
        df_fisico = processar_estoque_fisico(df_fisico_raw)

        st.subheader("Resultados da Concilia√ß√£o de Estoque")

        with st.expander("üîç An√°lise do Estoque F√≠sico", expanded=True):
            df_fisico_com_status = pd.merge(df_fisico, df_sistema[['Serial', 'Status', 'Modelo']], on='Serial', how='left')
            df_fisico_com_status['Status'].fillna('N√£o Encontrado no Sistema', inplace=True)
            
            st.metric("Total de Rastreadores no Estoque F√≠sico", value=len(df_fisico))
            
            disponivel_revisao = df_fisico_com_status[df_fisico_com_status['Status'].isin(['Dispon√≠vel', 'Revis√£o'])]
            indisponivel = df_fisico_com_status[df_fisico_com_status['Status'] == 'Indispon√≠vel']
            manutencao = df_fisico_com_status[df_fisico_com_status['Status'] == 'Manuten√ß√£o']
            
            col_a, col_b, col_c = st.columns(3)
            col_a.success(f"Dispon√≠vel/Revis√£o: **{len(disponivel_revisao)}**")
            col_b.warning(f"Indispon√≠vel (Em Uso): **{len(indisponivel)}**")
            col_c.error(f"Manuten√ß√£o: **{len(manutencao)}**")
            st.dataframe(df_fisico_com_status, use_container_width=True, hide_index=True)

        with st.expander("‚ö†Ô∏è An√°lise de Diverg√™ncias (Excluindo 'Indispon√≠veis')", expanded=True):
            df_sistema_para_conferencia = df_sistema[df_sistema['Status'] != 'Indispon√≠vel']
            seriais_sistema_conferencia = set(df_sistema_para_conferencia['Serial'])
            seriais_fisico = set(df_fisico['Serial'])
            
            faltando_no_fisico = seriais_sistema_conferencia - seriais_fisico
            
            if not faltando_no_fisico:
                st.success("üéâ Parab√©ns! Todos os rastreadores que deveriam estar em estoque foram encontrados.")
            else:
                st.error(f"Aten√ß√£o: {len(faltando_no_fisico)} rastreador(es) n√£o foram encontrados no estoque f√≠sico.")
                
                # Prepara a coluna para exibi√ß√£o, se existir
                if '√öltima Transmiss√£o' not in df_sistema.columns:
                     df_sistema['√öltima Transmiss√£o'] = "N/A"
                
                df_faltantes = df_sistema[df_sistema['Serial'].isin(faltando_no_fisico)]
                st.dataframe(
                    df_faltantes[['Serial', 'Status', 'Modelo', '√öltima Transmiss√£o']],
                    use_container_width=True, hide_index=True
                )

    except Exception as e:
        st.error(f"Ocorreu um erro ao processar os ficheiros: {e}")
        st.info("Por favor, verifique se os ficheiros t√™m o formato e as colunas esperadas, e se o cabe√ßalho est√° realmente na linha 12 do ficheiro do sistema.")

else:
    st.info("Por favor, carregue ambos os ficheiros para iniciar a an√°lise.")
