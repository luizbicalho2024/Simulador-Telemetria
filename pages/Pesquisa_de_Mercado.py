# pages/Pesquisa_de_Mercado.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import re

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="Pesquisa de Mercado",
    page_icon="imgs/v-c.png"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. FUN√á√ÉO PARA CARREGAR DADOS DIRETAMENTE DOS FICHEIROS CSV ---
@st.cache_data
def load_data_from_files():
    """Carrega todos os dados dos ficheiros CSV para garantir a fidelidade."""
    try:
        df_funci_regionais = pd.read_csv("funcionalidades e preco.xlsx - funci. regionais.csv")
        df_funci_nacionais = pd.read_csv("funcionalidades e preco.xlsx - funci. nacionais.csv")
        df_preco_regionais = pd.read_csv("funcionalidades e preco.xlsx - preco regionais.csv")
        df_preco_nacionais = pd.read_csv("funcionalidades e preco.xlsx - preco nacionais.csv")
        return df_funci_regionais, df_funci_nacionais, df_preco_regionais, df_preco_nacionais
    except FileNotFoundError as e:
        st.error(f"Erro ao carregar os ficheiros de dados: {e}. Certifique-se de que os quatro ficheiros .csv est√£o na pasta raiz do projeto.")
        return None, None, None, None

# Carrega os dados
df_funci_regionais, df_funci_nacionais, df_preco_regionais, df_preco_nacionais = load_data_from_files()

if df_funci_regionais is None:
    st.stop() # Interrompe a execu√ß√£o se os dados n√£o puderem ser carregados

# --- 3. INTERFACE DA P√ÅGINA ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title(f"Ol√°, {st.session_state.get('name', 'N/A')}! üëã")
st.sidebar.markdown("---")

try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>Pesquisa de Mercado e Concorrentes</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- SE√á√ÉO MERCADO-ALVO E DIFERENCIAIS ---
st.subheader("Nosso Mercado-Alvo")
st.markdown("""
| Segmento | Dor Principal | Oportunidade para o Verdio |
|---|---|---|
| **Locadoras de Ve√≠culos** | Risco e Descontrole do Ativo: Uso indevido, sinistros e a dificuldade de garantir a seguran√ßa do patrim√¥nio. | Oferecer uma solu√ß√£o de prote√ß√£o do ativo e seguran√ßa jur√≠dica, que vai al√©m do simples rastreamento. |
| **Transportadoras** | Altos Custos Operacionais e Riscos Trabalhistas: Consumo excessivo de combust√≠vel, manuten√ß√£o imprevista e acidentes. | Entregar uma plataforma de efici√™ncia operacional e compliance, com ROI claro atrav√©s da redu√ß√£o de custos. |
""")
st.markdown("---")

st.subheader("Nossos Diferenciais Competitivos")
st.write("Para vencer no mercado, nosso discurso deve focar nos pilares que a concorr√™ncia n√£o entrega de forma integrada:")
st.info("üìä **Gest√£o Financeira Integrada (ROI Claro):** Nossos dashboards transformam dados operacionais em indicadores financeiros, provando o retorno sobre o investimento.")
st.info("üëÆ‚Äç‚ôÇÔ∏è **Seguran√ßa Jur√≠dica e Compliance:** Somos a √∫nica solu√ß√£o que integra a gest√£o da Lei do Motorista com o sensor de fadiga, mitigando passivos trabalhistas e acidentes.")
st.info("üí° **Inova√ß√£o Acess√≠vel:** Oferecemos tecnologias de ponta (sensor de fadiga, v√≠deo) que s√£o tipicamente premium, como parte do nosso pacote padr√£o.")
st.markdown("---")


# --- 4. EXIBI√á√ÉO DAS TABELAS COMPLETAS ---
st.subheader("An√°lise de Pre√ßos")
with st.expander("Comparativo de Pre√ßos - Concorrentes Nacionais", expanded=True):
    st.dataframe(df_preco_nacionais, hide_index=True, use_container_width=True)

with st.expander("Comparativo de Pre√ßos - Concorrentes Regionais", expanded=True):
    st.dataframe(df_preco_regionais, hide_index=True, use_container_width=True)

st.markdown("---")

st.subheader("An√°lise de Funcionalidades")
with st.expander("Comparativo de Funcionalidades - Concorrentes Nacionais", expanded=True):
    st.dataframe(df_funci_nacionais, hide_index=True, use_container_width=True)

with st.expander("Comparativo de Funcionalidades - Concorrentes Regionais", expanded=True):
    st.dataframe(df_funci_regionais, hide_index=True, use_container_width=True)

st.markdown("---")


# --- 5. GR√ÅFICOS DE BUSINESS INTELLIGENCE (BI) ---
st.subheader("Visualiza√ß√£o e Intelig√™ncia de Mercado (BI)")

# --- GR√ÅFICO 1: PONTUA√á√ÉO DE FUNCIONALIDADES ---
st.markdown("##### Pontua√ß√£o Total de Funcionalidades")
st.write("Este gr√°fico classifica os concorrentes com base numa pontua√ß√£o, onde cada funcionalidade essencial ('Sim') vale 1 ponto e 'Parcial' ou 'Opcional' vale 0.5.")

df_func_all = pd.concat([df_funci_nacionais, df_funci_regionais]).drop_duplicates(subset=['Empresa']).reset_index(drop=True)
score_map = {'‚úÖ Sim': 1.0, '‚ùî Opcional': 0.5, '‚ùî Parcial': 0.5, '‚ùå N√£o': 0.0, '‚ùî Comercial': 0.0}
features_to_score = ['Telemetria (CAN)', 'V√≠deo', 'Sensor de Fadiga', 'Controle de Jornada', 'Roteirizador', 'Suporte 24h', 'App de Gest√£o']

for feature in features_to_score:
    if feature in df_func_all.columns:
        df_func_all[feature] = df_func_all[feature].map(score_map).fillna(0)

df_func_all['Pontua√ß√£o Total'] = df_func_all[features_to_score].sum(axis=1)
df_func_all_sorted = df_func_all.sort_values('Pontua√ß√£o Total', ascending=True)

fig_score = go.Figure(go.Bar(
    y=df_func_all_sorted['Empresa'], x=df_func_all_sorted['Pontua√ß√£o Total'],
    orientation='h', marker=dict(color=df_func_all_sorted['Pontua√ß√£o Total'], colorscale='Greens')
))
fig_score.update_layout(
    title='Ranking de Concorrentes por Pontua√ß√£o de Funcionalidades',
    xaxis_title='Pontua√ß√£o Total (Soma das Funcionalidades)', yaxis_title=None, height=600
)
st.plotly_chart(fig_score, use_container_width=True)

# --- GR√ÅFICO 2: CUSTO-BENEF√çCIO ---
st.markdown("##### An√°lise de Custo-Benef√≠cio (GPRS)")
st.write("Este gr√°fico cruza o custo da mensalidade GPRS com a pontua√ß√£o de funcionalidades.")

def clean_price(price_str):
    try:
        price = re.findall(r'\d+[\.,]\d+', str(price_str))[0]
        return float(price.replace(',', '.'))
    except (IndexError, TypeError):
        return None

df_prices_all = pd.concat([df_preco_nacionais, df_preco_regionais]).drop_duplicates(subset=['Empresa'])
df_prices_all['Mensalidade_GPRS_Num'] = df_prices_all['Mensalidade (GPRS)'].apply(clean_price)

df_bi = pd.merge(df_func_all, df_prices_all, on='Empresa', how='left')
df_bi.dropna(subset=['Mensalidade_GPRS_Num'], inplace=True)

df_bi['color'] = df_bi['Empresa'].apply(lambda x: '#A7C957' if 'VERDIO' in x else '#0582CA')
df_bi['size'] = df_bi['Pontua√ß√£o Total'].apply(lambda y: y * 4 + 10)

fig_bubble_bi = go.Figure(data=[go.Scatter(
    x=df_bi['Mensalidade_GPRS_Num'], y=df_bi['Pontua√ß√£o Total'],
    text=df_bi['Empresa'], mode='markers+text', textposition="top center",
    marker=dict(size=df_bi['size'], color=df_bi['color'])
)])
fig_bubble_bi.update_layout(
    title='Custo (Mensalidade GPRS) vs. Benef√≠cio (Pontua√ß√£o de Funcionalidades)',
    xaxis_title="Pre√ßo da Mensalidade GPRS (R$)",
    yaxis_title="Pontua√ß√£o Total de Funcionalidades",
    height=600, showlegend=False
)
st.plotly_chart(fig_bubble_bi, use_container_width=True)
