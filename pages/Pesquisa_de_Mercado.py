# pages/Pesquisa_de_Mercado.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import re

# --- 1. CONFIGURA√á√ÉO E AUTENTICA√á√ÉO ---
st.set_page_config(
    layout="wide",
    page_title="Pesquisa de Mercado",
    page_icon="imgs/v-c.png"
)

if not st.session_state.get("authentication_status"):
    st.error("üîí Acesso Negado! Por favor, fa√ßa login para visualizar esta p√°gina.")
    st.stop()

# --- 2. DADOS CENTRALIZADOS (Vers√£o Corrigida e Completa) ---
MARKET_DATA = {
    "funcionalidades": [
        {'Empresa': 'VERDIO', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚úÖ Sim', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Sascar', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Omnilink', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Onixsat', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Veltec', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚úÖ Sim', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Positron', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùî Opcional', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚úÖ Sim', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Autotrac', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Maxtrack', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Elite Rastro', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'NJ Rastreamento', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'TK Rastreadores', 'Telemetria (CAN)': '‚úÖ Sim', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚úÖ Sim', 'Suporte 24h': '‚ùî Comercial', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Rastrek', 'Telemetria (CAN)': '‚ùî Parcial', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Pro Lion', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
        {'Empresa': 'Impacto Rast.', 'Telemetria (CAN)': '‚ùå N√£o', 'V√≠deo': '‚ùå N√£o', 'Sensor de Fadiga': '‚ùå N√£o', 'Controle de Jornada': '‚ùå N√£o', 'Roteirizador': '‚ùå N√£o', 'Suporte 24h': '‚úÖ Sim', 'App de Gest√£o': '‚úÖ Sim'},
    ],
    "precos": [
        {'Empresa': 'VERDIO', 'Mensalidade (GPRS)': 'A partir de R$ 40,00'},
        {'Empresa': 'Sascar', 'Mensalidade (GPRS)': 'R$ 79,90'},
        {'Empresa': 'Omnilink', 'Mensalidade (GPRS)': 'R$ 89,90'},
        {'Empresa': 'Onixsat', 'Mensalidade (GPRS)': '‚Äì'},
        {'Empresa': 'Veltec', 'Mensalidade (GPRS)': 'R$ 110,00'},
        {'Empresa': 'Positron', 'Mensalidade (GPRS)': 'R$ 75,00'},
        {'Empresa': 'Autotrac', 'Mensalidade (GPRS)': 'R$ 99,90'},
        {'Empresa': 'Maxtrack', 'Mensalidade (GPRS)': 'R$ 59,90'},
        {'Empresa': 'Elite Rastro', 'Mensalidade (GPRS)': 'R$ 50,00'},
        {'Empresa': 'NJ Rastreamento', 'Mensalidade (GPRS)': 'R$ 75,00'},
        {'Empresa': 'TK Rastreadores', 'Mensalidade (GPRS)': 'R$ 69,90'},
        {'Empresa': 'Rastrek', 'Mensalidade (GPRS)': 'R$ 60,00'},
        {'Empresa': 'Pro Lion', 'Mensalidade (GPRS)': 'R$ 49,90'},
        {'Empresa': 'Impacto Rast.', 'Mensalidade (GPRS)': 'R$ 45,00'},
    ]
}

# --- 3. PROCESSAMENTO DE DADOS PARA GR√ÅFICOS ---
df_func_all = pd.DataFrame(MARKET_DATA["funcionalidades"])
df_prices_all = pd.DataFrame(MARKET_DATA["precos"])

score_map = {'‚úÖ Sim': 1.0, '‚ùî Opcional': 0.5, '‚ùî Parcial': 0.5, '‚ùå N√£o': 0.0, '‚ùî Comercial': 0.0}
features_to_score = ['Telemetria (CAN)', 'V√≠deo', 'Sensor de Fadiga', 'Controle de Jornada', 'Roteirizador', 'Suporte 24h', 'App de Gest√£o']
for feature in features_to_score:
    if feature in df_func_all.columns:
        df_func_all[feature] = df_func_all[feature].map(score_map).fillna(0)
df_func_all['Pontua√ß√£o Total'] = df_func_all[features_to_score].sum(axis=1)

def clean_price(price_str):
    try:
        return float(re.findall(r'\d+[\.,]\d+', str(price_str))[0].replace(',', '.'))
    except (IndexError, TypeError):
        return None
df_prices_all['Mensalidade_GPRS_Num'] = df_prices_all['Mensalidade (GPRS)'].apply(clean_price)

df_bi = pd.merge(df_func_all, df_prices_all, on='Empresa', how='inner')
df_bi.dropna(subset=['Mensalidade_GPRS_Num', 'Pontua√ß√£o Total'], inplace=True)


# --- 4. INTERFACE DA P√ÅGINA ---
st.sidebar.image("imgs/v-c.png", width=120)
st.sidebar.title(f"Ol√°, {st.session_state.get('name', 'N/A')}! üëã")
st.sidebar.markdown("---")

try:
    st.image("imgs/logo.png", width=250)
except: pass

st.markdown("<h1 style='text-align: center; color: #006494;'>Pesquisa de Mercado e Concorrentes</h1>", unsafe_allow_html=True)
st.markdown("---")

# --- SE√á√ÉO MERCADO-ALVO E DIFERENCIAIS (REINTEGRADOS) ---
st.subheader("Nosso Mercado-Alvo")
st.markdown("""
| Segmento | Dor Principal | Oportunidade para o Verdio |
|---|---|---|
| **Locadoras de Ve√≠culos** | Risco e Descontrole do Ativo: Uso indevido, sinistros e a dificuldade de garantir a seguran√ßa do patrim√¥nio. | Oferecer uma solu√ß√£o de prote√ß√£o do ativo e seguran√ßa jur√≠dica. |
| **Transportadoras** | Altos Custos Operacionais e Riscos Trabalhistas: Consumo excessivo de combust√≠vel, acidentes. | Entregar uma plataforma de efici√™ncia operacional e compliance, com ROI claro. |
""")
st.markdown("---")

st.subheader("Nossos Diferenciais Competitivos")
st.info("üìä **Gest√£o Financeira Integrada (ROI Claro):** Transformamos dados operacionais em indicadores financeiros.")
st.info("üëÆ‚Äç‚ôÇÔ∏è **Seguran√ßa Jur√≠dica e Compliance:** Integramos a gest√£o da Lei do Motorista com o sensor de fadiga.")
st.info("üí° **Inova√ß√£o Acess√≠vel:** Oferecemos tecnologias de ponta como parte do nosso pacote padr√£o.")
st.markdown("---")


# --- 5. GR√ÅFICOS DE BUSINESS INTELLIGENCE (BI) ---
st.subheader("Visualiza√ß√£o e Intelig√™ncia de Mercado (BI)")

# --- GR√ÅFICO 1: PONTUA√á√ÉO DE FUNCIONALIDADES ---
st.markdown("##### Pontua√ß√£o Total de Funcionalidades")
st.write("Este gr√°fico classifica os concorrentes com base na soma de funcionalidades essenciais.")
df_func_all_sorted = df_func_all.sort_values('Pontua√ß√£o Total', ascending=True)
fig_score = go.Figure(go.Bar(
    y=df_func_all_sorted['Empresa'], x=df_func_all_sorted['Pontua√ß√£o Total'],
    orientation='h', marker=dict(color=df_func_all_sorted['Pontua√ß√£o Total'], colorscale='Greens')
))
fig_score.update_layout(
    title='Ranking de Concorrentes por Pontua√ß√£o de Funcionalidades',
    xaxis_title='Pontua√ß√£o Total (Soma das Funcionalidades)', yaxis_title=None, height=600
)
st.plotly_chart(fig_score, use_container_width=True)

# --- GR√ÅFICO 2: CUSTO-BENEF√çCIO (COM CORES √öNICAS) ---
st.markdown("##### An√°lise de Custo-Benef√≠cio (GPRS)")
st.write("Este gr√°fico cruza o custo da mensalidade GPRS com a pontua√ß√£o de funcionalidades.")

unique_companies = df_bi['Empresa'].unique()
color_palette = px.colors.qualitative.Plotly
color_map = {company: color_palette[i % len(color_palette)] for i, company in enumerate(unique_companies)}
if 'VERDIO' in color_map:
    color_map['VERDIO'] = '#2ca02c'

df_bi['color'] = df_bi['Empresa'].map(color_map)
df_bi['size'] = df_bi['Pontua√ß√£o Total'].apply(lambda y: y * 4 + 15)

fig_bubble_bi = go.Figure()
for empresa in df_bi['Empresa'].unique():
    df_empresa = df_bi[df_bi['Empresa'] == empresa]
    fig_bubble_bi.add_trace(go.Scatter(
        x=df_empresa['Mensalidade_GPRS_Num'], y=df_empresa['Pontua√ß√£o Total'],
        name=empresa, text=df_empresa['Empresa'], mode='markers',
        marker=dict(size=df_empresa['size'], color=df_empresa['color'].iloc[0], sizemode='diameter')
    ))
fig_bubble_bi.update_layout(
    title='Custo (Mensalidade GPRS) vs. Benef√≠cio (Pontua√ß√£o de Funcionalidades)',
    xaxis_title="Pre√ßo da Mensalidade GPRS (R$)",
    yaxis_title="Pontua√ß√£o Total de Funcionalidades",
    height=600, legend_title_text='Concorrentes'
)
st.plotly_chart(fig_bubble_bi, use_container_width=True)
